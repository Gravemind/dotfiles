[alias]
	co  = checkout
	ci  = commit
	com = commit -m
	sw  = switch
	res = restore

	st  = status
	s   = status -sb

	# git status current dir, and force showuntrack
	ss  = -c status.showUntrackedFiles=normal status -sb .

	d   = diff -M
	dc  = diff -M --cached
	ds  = dc # --staged is a synonym of --cached
	du  = diff -M @..@{u}
	dw  = diff --word-diff=color '--word-diff-regex=[a-zA-Z0-9\\.]+|[^[:space:]]' -M
	dcw = diff --word-diff=color '--word-diff-regex=[a-zA-Z0-9\\.]+|[^[:space:]]' -M --cached
	dsw = dcw
	duw = diff --word-diff=color '--word-diff-regex=[a-zA-Z0-9\\.]+|[^[:space:]]' -M @..@{u}

	# Difftastic https://difftastic.wilfred.me.uk/
	dft = "!env GIT_EXTERNAL_DIFF=difft git diff -M"

	dule = submodule

	# Parallel fetch all submodules
	# dulefp = "!f() { j=5; git submodule foreach --recursive -q 'echo $displaypath' | xargs -t -r -d\\\\n -P$j -I\\{\\} git -C \\{\\} fetch --all --prune --tags; }; f"
	dulefp = "!f() { j=5; git fetch -j$j --multiple --prune --prune-tags --tags --recurse-submodules=yes; }; f"

	b = branch --sort=version:refname
	ba = branch --sort=version:refname --all

	su = !git --no-pager diff --name-only --diff-filter=U
	sa = !git --no-pager diff --name-only --diff-filter=A
	sm = !git --no-pager diff --name-only --diff-filter=M
	sd = !git --no-pager diff --name-only --diff-filter=D

	# usage: refs FOR-EACH-REF-ARGS
	# List branch and tags in a short form
	# FIXME: where is the color ?! git 2.24 had colors !?
	rfs = for-each-ref --format='%(refname:lstrip=2)' --sort=version:refname

	# usage: git cont REV
	# Show branch and tags containing REV
	#cont = branch --sort=version:refname --all --contains
	#contt = tag --contains
	cont = rfs --contains

	a = add
	# "un-add"
	ua = reset HEAD

	# Update other (non-checkout) branch
	bu = "!f() { set -eu; git branch -f \"$1\" \"$1@{upstream}\"; }; f"

	# Update other branch then checkout it
	cou = "!f() { set -eu; git bu \"$1\" && git switch \"$1\"; }; f"

	# Fetch prune all
	fp = fetch --all --prune

	# Pull only if fast forward is possible (abort if conflicts)
	pulf = pull --no-rebase --ff-only

	# Pull rebase with autostash
	pulr = pull --rebase --autostash

	# Push force but verifies that we've seen all concurrent work
	pushf = push --force-with-lease --force-if-includes

	# Push current branch and set upstream
	pushc = -c push.default=current push -u

	# usage: git pushu [REMOTE]
	# Push current branch to REMOTE (origin) and set it as its upstream.
	pushu = "!f() { set -e; git push --set-upstream \"${1:-origin}\" $(git symbolic-ref --short HEAD); }; f"

	# Clean deleted branches
	cleanbranches = !git branch -vv | grep ': gone]' | awk '{ print $1 }' | xargs -n 1 git branch -d

	cleanuporiginal = !git for-each-ref --format '%(refname)' refs/original/ | xargs -n1 -t git update-ref -d

	# Short merge base of HEAD and $1
	mb = "!f() { set -eu; git rev-parse --short $(git merge-base ${1} ${2:-@}); }; f"

	# usage: git magicmerge BRANCH
	# Magic merge
	# -c merge.renamelimit=2048		# increase "follow file rename" limit
	# -X patience					# slower but much smarter merge
	# -X rename-threshold=10		# 2 files with 10% similarities is a rename
	# # -X ignore-space-change		# ignore whitespaces
	# -X ignore-space-at-eol		# ignore whitespaces at eol only
	# --no-ff						# dont fast forward, ie always create a commit
	# --no-commit					# dont "auto" commit after merge
	magicmerge = !git -c merge.renamelimit=2048 merge -X patience -X rename-threshold=10 -X ignore-space-at-eol --no-ff --no-commit

	# Merge fast-forward only
	mf = merge --ff-only
	mff = merge --ff-only

	# Merge non fast-forward (create a commit)
	mnf = merge --no-ff

	# Merge non fast-forward (create a commit), and don't commit
	mnfc = merge --no-ff --no-commit

	# git log note: by default, `git log file` hides commits that make "the end result
	# the same"; --full-history shows everything, and --simplify-merges re-hides
	# only needless merges.

	# Log pretty
	lp  = log --pretty=my

	# - git-log --full-history --simplify-merges solves a "common problem users face when looking at simplified
	#   history is that a commit they know changed a file somehow does not appear in the file’s
	#   simplified history."
	# - git-log --show-pulls (Git 2.27) also show merge commits that introduce a change.

	# Log
	l  = log --pretty=my --graph --full-history --simplify-merges --show-pulls --date-order

	# Log, topologic order
	lt = log --pretty=my --graph --full-history --simplify-merges --show-pulls --topo-order

	# Log all
	la = log --pretty=my --graph --full-history --simplify-merges --show-pulls --date-order --all

	# Log all, topologic
	lat = log --pretty=my --graph --full-history --simplify-merges --show-pulls --topo-order --all

	# Log a "left" and a "right" rev up to their common ancestor
	# usage: git lr <left-commit>...<right-commit>
	lr = log --pretty=my --graph --full-history --simplify-merges --show-pulls --date-order --left-right --boundary

	# Log commits between HEAD (<) and its upstream (>)
	lu = "!f() { set -eu; git lr @...@{u} \"${@}\"; }; f"

	# Log commits between HEAD (<) and another branch (>)
	lo = "!f() { set -eu; git lr @...$1 \"${@:1}\"; }; f"

	# Log all local branches and their upstreams
	lb = "!f() { set -eu; git l $(git for-each-ref --format=\"%(refname) %(upstream)\" refs/heads) \"$@\" ; }; f"

	# usage: git lcont [COMMIT]
	# Log all branches, tags, and remotes that contains COMMIT (HEAD)
	lcont  = "!f() { set -eu; c=\"${1:-@}\"; git l --boundary $(git for-each-ref --format='%(refname)' --contains \"$c\") --not \"$c\" \"${@:1}\"; }; f"

	# Long log
	ll  = log --pretty=myl --graph --full-history --simplify-merges --date-order

	# pretty reflog
	# (--date here will make it print reflog@{date} instead of reflog@{num})
	rl  = log --pretty=myreflog --walk-reflogs --date=auto:relative
	# pretty reflog, show "ref@{Nth}" instead of "ref@{date}"
	rli  = log --pretty=myreflog --walk-reflogs

	# Log with tig
	ltig = "!f() { set -eu; git --no-pager log --format=%H \"$@\" | tig --no-walk --stdin; }; f"

	# Fuller show
	showf = show --format=fuller

	# Show hide untracked files
	hideuntrack = config --local status.showUntrackedFiles no
	showuntrack = config --local status.showUntrackedFiles normal

	# It's a good practice to make the very frist commit of a repo empty
	first = commit -m 'first commit' --allow-empty
	first = commit -m 'First commit' --allow-empty

	branches = for-each-ref --sort committerdate --format '%(align:40)%(refname:lstrip=2)%(end) %(align:40)%(committerdate:relative)%(end) (%(committername)) %(contents:subject)' refs/heads refs/remotes

	ls-ignored-status = status -sb --ignored
	ls-ignored-untracked = ls-files --ignored --exclude-standard --others
	ls-ignored-tracked = ls-files --ignored --exclude-standard --cached

[format]
	# default pretty format for log/show/whatchanged
	#pretty = my

# Pretty log format
[pretty]
	my  = "tformat:%C(magenta)%h%C(auto)% D %C(auto)%<(72,trunc)%s%C(blue)%>>|(100)%aN %C(bold black)%ad%C(auto)"
	myl = "tformat:%C(magenta)----------%n%C(magenta)%h %C(bold black)%><(60)%ad%C(reset)%C(blue)%>>|(100)%an%n%C(auto)%S %+D%n%C(auto)%n%w(80,4,4)%B"
	# myreflog = "tformat:%C(bold black)$> %gs (%gn)%n   %C(green)%gd: %C(magenta)%h%C(auto)% D %C(auto)%<(72,trunc)%s%C(blue)%>>|(110)%an %C(bold black)%ad%C(auto)%n"
	myreflog = "tformat:%C(green)%gd: %C(magenta)%h%C(auto)% D %C(auto)%<(72,trunc)%s%C(blue)%>>|(110)%an %C(bold black)%ad%C(auto)%n%C(bold black)↿ %gs (%gn)"
[log]
	# date "auto:foo" means foo date format "foo" is only used when using a pager, else it will use the default format
	date = auto:relative
[blame]
	date = auto:relative

[color "branch"]
	current = bold white
	local = bold green
	remote = bold cyan
[color "decorate"]
	HEAD = bold white
	branch = bold green
	remoteBranch = bold cyan
	tag = bold yellow
	stash = bold blue
[color "status"]
	header = bold white
	added = bold green
	changed = bold blue
	untracked = red
	unmerged = bold red
	branch = bold green
	localBranch = bold green
	remoteBranch = bold cyan

[color "diff-highlight"]
       oldNormal = red
       oldHighlight = reverse dim red
       newNormal = green
       newHighlight = reverse dim green

[color "diff"]
	# 256color git diff --color-moved=zebra
	newMoved = 65
	newMovedAlternative = 66
	oldMoved = 96
	oldMovedAlternative = 97

[color]
	branch = auto
	diff = auto
	interactive = auto
	status = auto
	log = auto
	ui = auto
	grep = auto

#[column]
#	ui = auto column dense

[core]
	pager = less
[pager]
	# If $LESS exists, git will use it instead of the default "less -FRX"
	# So here, restore "FRX" only for those commands.
	# -F : --quit-if-one-screen
	# -R : --RAW-CONTROL-CHARS: allow ANSI "color" escape sequences
	# -X : --no-init : no termcap clear on quit
	tag = "less -FRX"
	branch = "less -FRX"
	show-branch = "less -FRX"
[init]
	defaultBranch = main
[tag]
	sort = version:refname
	# sort = creatordate
[branch]
	sort = version:refname
[fetch]
	prune = true
	# prunetags = true  # Borken with multiple remotes
[pull]
	rebase = true
[push]
	# Push to @{upstream}
	default = upstream
	# Auto setup upstream on first push
	autoSetupRemote = true
[rebase]
	autoStash = true
	#autoSquash = true
	# In a "rebase -i"'s todo list, error if a line was removed.
	# (You should use "drop" instead.)
	# missingCommitsCheck = error
[merge]
	conflictstyle = diff3
	# Don't keep .orig files
	keepbackup = false
[rerere]
	enabled = true
[core]
	# Increase short hash to 10 characters
	abbrev = 10
[diff]
	# Shift diff hunk boundaries
	indentHeuristic = true

	#algorithm = default # myers
	#algorithm = myers # The basic greedy diff algorithm. Currently, this is the default.
	#algorithm = minimal # Spend extra time to make sure the smallest possible diff is produced.
	#algorithm = patience # Use "patience diff" algorithm when generating patches.
	algorithm = histogram # This algorithm extends the patience algorithm to "support low-occurrence common elements".

	# Change "a/" or "b/" to "w/" (wortree) or "c/" (commit) or "i/" (index)
	# or "o/" (object, "HEAD:file").
	mnemonicPrefix = true

[user]
	# Do not guess user/email, always use config, fail if there is none.
	useconfigonly = true

[core]
	# default:
	#whitespace = blank-at-eol,blank-at-eof,space-before-tab
	whitespace = blank-at-eol,blank-at-eof,space-before-tab,cr-at-eol

	# checkout crlf, commit lf
	#autocrlf = true
	# checkout as is, commit lf
	#autocrlf = input
	# checkout as is, commit as is
	autocrlf = false

[core]
	# Global gitignore
	excludesfile = "~/.gitignore.global"

# [blame]
# 	ignoreRevsFile = .git-blame-ignore-revs

# Better Submodules config:
[fetch]
	# git-fetch also fetches (only) updated submodules
	recurseSubmodules = on-demand
[push]
	# git-push checks that submodules have been pushed
	recurseSubmodules = check
[diff]
	# git-diff shows the list of new commits in submodules (instead of just
	# hash) (supported by magit!)
	submodule = log

[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true

# [merge]
# 	tool = meld
# [mergetool "emerge"]
# 	path = /home/jo/bin/emerge-for-git

### WINDOWS ###
#[core]
#	autocrlf = true
#	editor = \"C:/Program Files (x86)/emacs-24.3/bin/emacs.exe\"
#	eol = crlf
#[difftool "meld"]
#	cmd = '/c/Program Files (x86)/Meld/meld/meld.exe' \"$LOCAL\" \"$REMOTE\"

[include]
	path = ~/.gitconfig.local

#[user]
#	name = ...
#	email = ...@...

#[github]
#	user = ...

# # Convert push url from https to ssh.
# # Use fake ssh url with per-account ssh key config (see .ssh/config).
# [url "git@github.com-ACCOUNT:ACCOUNT/"]
# pushInsteadOf = "https://github.com/ACCOUNT/"
# [includeIf "hasconfig:remote.*.url:https://github.com/ACCOUNT/**"]
# path = ~/.gitconfig.local.ACCOUNT  # [user] name email
